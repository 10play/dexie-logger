/**
   * @license
   * author: Noam Golani <noam.golani@gmail.com>
   * dexie-logger.js v1.2.3
   * Released under the MIT license.
   */
this["dexie-logger"]=function(){"use strict";const o=()=>{document.body.appendChild((o=>{const e=document.createElement("div");return e.innerHTML=o,e.firstChild})('<div style="background-color: purple; border-radius: 50%; height: 50px; width: 50px; position: fixed; bottom: 20px; right: 20px;">test</div>'))},e={};return n=>{const{tableWhiteList:s,tablesBlackList:t,operationsBlackList:r,operationsWhiteList:l}=n||e;if(o(),s&&t)throw Error("You can't use both tableWhiteList and tablesBlackList at the same time");if(l&&r)throw Error("You can't use both operationsWhiteList and operationsBlackList at the same time");const c=(o,e)=>{let n=!1;n=l?l.includes(e):!r||!r.includes(e);let c=!1;return c=s?s.includes(o):!t||!t.includes(o),n&&c};return{stack:"dbcore",name:"logger",create:o=>({...o,table(e){const n=o.table(e);return{...n,mutate:async o=>{const s=performance.now();return c(e,"mutate")&&(console.groupCollapsed(`Dexie | ${e} [ Mutate ] => Request`),console.log(o.type),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),n.mutate(o).then((o=>{const n=performance.now()-s;return c(e,"mutate")&&(console.groupCollapsed(`Dexie | ${e} [ Mutate ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},get:async o=>{const s=performance.now();return c(e,"get")&&(console.groupCollapsed(`Dexie | ${e} [ Get ] => Request`),console.log(o.key),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),n.get(o).then((o=>{const n=performance.now()-s;return c(e,"get")&&(console.groupCollapsed(`Dexie | ${e} [ Get ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},getMany:async o=>{const s=performance.now();return c(e,"getMany")&&(console.groupCollapsed(`Dexie | ${e} [ Get Many ] => Request`),console.log(o.keys),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),n.getMany(o).then((o=>{const n=performance.now()-s;return c(e,"getMany")&&(console.groupCollapsed(`Dexie | ${e} [ Get Many ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},query:async o=>{const s=performance.now();return c(e,"query")&&(console.groupCollapsed(`Dexie | ${e}  [ Query ] => Request`),console.log(o.query),console.log(o),console.groupEnd()),n.query(o).then((o=>{const n=performance.now()-s;return c(e,"query")&&(console.groupCollapsed(`Dexie | ${e}  [ Query ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(o),console.groupEnd()),o}))},openCursor:async o=>{const s=performance.now();return c(e,"openCursor")&&(console.groupCollapsed(`Dexie | ${e} [ Open Cursor ] => Request`),console.log(`Dexie | Open Cursor | ${JSON.stringify(o.query,void 0,2)}, ${e} - `),console.groupEnd()),n.openCursor(o).then((o=>{const n=performance.now()-s;return c(e,"openCursor")&&(console.groupCollapsed(`Dexie | ${e} [ Open Cursor ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},count:async o=>{const s=performance.now();return c(e,"count")&&(console.groupCollapsed(`Dexie | ${e} [ Count ] => Request`),console.log(o.query),console.log(o),console.groupEnd()),n.count(o).then((o=>{const n=performance.now()-s;return c(e,"count")&&(console.groupCollapsed(`Dexie | ${e} [ Count ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(o),console.groupEnd()),o}))}}}})}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlcyI6WyIuLi9zcmMvZGV2dG9vbHMvYmFkZ2UudHMiLCIuLi9zcmMvZGV2dG9vbHMvZGV2dG9vbHMudHMiLCIuLi9zcmMvZGV2dG9vbHMvZG9tVXRpbHMudHMiLCIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsLG51bGwsbnVsbCxudWxsXSwibmFtZXMiOlsidXNlRGV2dG9vbHMiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImVsIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJzdHJpbmdUb0RPTSIsIkRFRkFVTFRfUFJPUFMiLCJsb2dnZXJQcm9wcyIsInRhYmxlV2hpdGVMaXN0IiwidGFibGVzQmxhY2tMaXN0Iiwib3BlcmF0aW9uc0JsYWNrTGlzdCIsIm9wZXJhdGlvbnNXaGl0ZUxpc3QiLCJFcnJvciIsInNob3VsZExvZyIsInRhYmxlTmFtZSIsIm9wZXJhdGlvbiIsInNob3VsZExvZ09wZXJhdGlvbiIsImluY2x1ZGVzIiwic2hvdWxkTG9nVGFibGUiLCJzdGFjayIsIm5hbWUiLCJjcmVhdGUiLCJkb3dubGV2ZWxEYXRhYmFzZSIsInRhYmxlIiwiZG93bmxldmVsVGFibGUiLCJtdXRhdGUiLCJhc3luYyIsInJlcSIsInN0YXJ0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiY29uc29sZSIsImdyb3VwQ29sbGFwc2VkIiwibG9nIiwidHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiLCJncm91cEVuZCIsInRoZW4iLCJyZXMiLCJ0aW1lRWxhcHNlZCIsInRvRml4ZWQiLCJnZXQiLCJrZXkiLCJnZXRNYW55Iiwia2V5cyIsInF1ZXJ5Iiwib3BlbkN1cnNvciIsImNvdW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7NkNBQU8sTUNHTUEsRUFBYyxLQUN6QkMsU0FBU0MsS0FBS0MsWUNKVyxDQUFDQyxJQUMxQixNQUFNQyxF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
