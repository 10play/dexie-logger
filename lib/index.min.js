/**
   * @license
   * author: Noam Golani <noam.golani@gmail.com>
   * dexie-logger.js v1.2.3
   * Released under the MIT license.
   */
this["dexie-logger"]=function(){"use strict";const o='<div style="background-color: purple; border-radius: 50%; height: 15px; width: 15px; position: fixed; bottom: 20px; right: 20px;">test</div>',e=o=>{const e=document.createElement("div");return e.innerHTML=o,e.firstChild},n={};return s=>{console.log(e(o)),document.body.appendChild(e(o));const{tableWhiteList:t,tablesBlackList:r,operationsBlackList:l,operationsWhiteList:c}=s||n;if(t&&r)throw Error("You can't use both tableWhiteList and tablesBlackList at the same time");if(c&&l)throw Error("You can't use both operationsWhiteList and operationsBlackList at the same time");const u=(o,e)=>{let n=!1;n=c?c.includes(e):!l||!l.includes(e);let s=!1;return s=t?t.includes(o):!r||!r.includes(o),n&&s};return{stack:"dbcore",name:"logger",create:o=>({...o,table(e){const n=o.table(e);return{...n,mutate:async o=>{const s=performance.now();return u(e,"mutate")&&(console.groupCollapsed(`Dexie | ${e} [ Mutate ] => Request`),console.log(o.type),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),n.mutate(o).then((o=>{const n=performance.now()-s;return u(e,"mutate")&&(console.groupCollapsed(`Dexie | ${e} [ Mutate ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},get:async o=>{const s=performance.now();return u(e,"get")&&(console.groupCollapsed(`Dexie | ${e} [ Get ] => Request`),console.log(o.key),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),n.get(o).then((o=>{const n=performance.now()-s;return u(e,"get")&&(console.groupCollapsed(`Dexie | ${e} [ Get ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},getMany:async o=>{const s=performance.now();return u(e,"getMany")&&(console.groupCollapsed(`Dexie | ${e} [ Get Many ] => Request`),console.log(o.keys),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),n.getMany(o).then((o=>{const n=performance.now()-s;return u(e,"getMany")&&(console.groupCollapsed(`Dexie | ${e} [ Get Many ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},query:async o=>{const s=performance.now();return u(e,"query")&&(console.groupCollapsed(`Dexie | ${e}  [ Query ] => Request`),console.log(o.query),console.log(o),console.groupEnd()),n.query(o).then((o=>{const n=performance.now()-s;return u(e,"query")&&(console.groupCollapsed(`Dexie | ${e}  [ Query ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(o),console.groupEnd()),o}))},openCursor:async o=>{const s=performance.now();return u(e,"openCursor")&&(console.groupCollapsed(`Dexie | ${e} [ Open Cursor ] => Request`),console.log(`Dexie | Open Cursor | ${JSON.stringify(o.query,void 0,2)}, ${e} - `),console.groupEnd()),n.openCursor(o).then((o=>{const n=performance.now()-s;return u(e,"openCursor")&&(console.groupCollapsed(`Dexie | ${e} [ Open Cursor ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(JSON.stringify(o,void 0,2)),console.groupEnd()),o}))},count:async o=>{const s=performance.now();return u(e,"count")&&(console.groupCollapsed(`Dexie | ${e} [ Count ] => Request`),console.log(o.query),console.log(o),console.groupEnd()),n.count(o).then((o=>{const n=performance.now()-s;return u(e,"count")&&(console.groupCollapsed(`Dexie | ${e} [ Count ] (${n.toFixed(1)} ms) <= Response`),console.log("-> Duration: "+n+" ms"),console.log(o),console.groupEnd()),o}))}}}})}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlcyI6WyIuLi9zcmMvZGV2dG9vbHMvYmFkZ2UudHMiLCIuLi9zcmMvZGV2dG9vbHMvZG9tVXRpbHMudHMiLCIuLi9zcmMvaW5kZXgudHMiLCIuLi9zcmMvZGV2dG9vbHMvZGV2dG9vbHMudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsLG51bGwsbnVsbCxudWxsXSwibmFtZXMiOlsiYmFkZ2UiLCJzdHJpbmdUb0RPTSIsImVsIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsIkRFRkFVTFRfUFJPUFMiLCJsb2dnZXJQcm9wcyIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ0YWJsZVdoaXRlTGlzdCIsInRhYmxlc0JsYWNrTGlzdCIsIm9wZXJhdGlvbnNCbGFja0xpc3QiLCJvcGVyYXRpb25zV2hpdGVMaXN0IiwiRXJyb3IiLCJzaG91bGRMb2ciLCJ0YWJsZU5hbWUiLCJvcGVyYXRpb24iLCJzaG91bGRMb2dPcGVyYXRpb24iLCJpbmNsdWRlcyIsInNob3VsZExvZ1RhYmxlIiwic3RhY2siLCJuYW1lIiwiY3JlYXRlIiwiZG93bmxldmVsRGF0YWJhc2UiLCJ0YWJsZSIsImRvd25sZXZlbFRhYmxlIiwibXV0YXRlIiwiYXN5bmMiLCJyZXEiLCJzdGFydFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImdyb3VwQ29sbGFwc2VkIiwidHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiLCJncm91cEVuZCIsInRoZW4iLCJyZXMiLCJ0aW1lRWxhcHNlZCIsInRvRml4ZWQiLCJnZXQiLCJrZXkiLCJnZXRNYW55Iiwia2V5cyIsInF1ZXJ5Iiwib3BlbkN1cnNvciIsImNvdW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7NkNBQU8sTUFBTUEsRUFBUSwrSUNBUkMsRUFBZUMsSUFDMUIsTUFBTUMsRUFBWUMsU0FBU0MsY0FBYyxPQUV6QyxP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
